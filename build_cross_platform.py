#!/usr/bin/env python3
"""
Enhanced Cross-Platform Build System for Linken Sphere Apple Browser
Supports Windows (.exe), macOS (.app/.dmg), and Linux builds with proper icons and dependencies
"""

import os
import sys
import platform
import subprocess
import shutil
import json
from pathlib import Path

class CrossPlatformBuilder:
    def __init__(self):
        self.system = platform.system()
        self.app_name = "LinkenSphereAppleBrowser"
        self.script_name = "simple_linken_gui.py"
        self.build_dir = "dist"
        self.work_dir = "build"
        self.spec_dir = "build"

        # Platform-specific configurations
        self.icon_files = {
            "Windows": "app_icon.ico",
            "Darwin": "app_icon.icns",  # macOS prefers .icns
            "Linux": "app_icon.png"
        }

        # Required data files for all platforms
        self.data_files = [
            "linken_sphere_playwright_browser.py",
            "linken_sphere_api.py",
            "app_icon.ico",
            "app_icon.png"
        ]

        # Optional configuration files
        self.optional_files = [
            "linken_sphere_config.json",
            "config.json",
            "settings.ini"
        ]

        # Hidden imports required for all platforms
        self.hidden_imports = [
            "asyncio",
            "playwright",
            "playwright.async_api",
            "requests",
            "PIL",
            "PIL.Image",
            "PIL.ImageTk",
            "tkinter",
            "tkinter.ttk",
            "tkinter.messagebox",
            "tkinter.scrolledtext",
            "tkinter.filedialog",
            "threading",
            "json",
            "logging",
            "pathlib",
            "configparser"
        ]
        
    def check_dependencies(self):
        """Ê£ÄÊü•ÊûÑÂª∫‰æùËµñ"""
        print("üîß Ê£ÄÊü•ÊûÑÂª∫‰æùËµñ...")

        # Ê£ÄÊü•PythonÁâàÊú¨
        python_version = sys.version_info
        if python_version < (3, 8):
            print(f"‚ùå PythonÁâàÊú¨Ëøá‰Ωé: {python_version.major}.{python_version.minor}")
            print("   ÈúÄË¶ÅPython 3.8ÊàñÊõ¥È´òÁâàÊú¨")
            return False
        print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")

        # Ê£ÄÊü•PyInstaller
        try:
            import PyInstaller
            print(f"‚úÖ PyInstaller {PyInstaller.__version__}")
        except ImportError:
            print("üì¶ ÂÆâË£ÖPyInstaller...")
            try:
                subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"], check=True)
                print("‚úÖ PyInstaller ÂÆâË£ÖÂÆåÊàê")
            except subprocess.CalledProcessError:
                print("‚ùå PyInstaller ÂÆâË£ÖÂ§±Ë¥•")
                return False

        # Ê£ÄÊü•Pillow (Áî®‰∫éÂõæÊ†áÂ§ÑÁêÜ)
        try:
            import PIL
            print(f"‚úÖ Pillow {PIL.__version__}")
        except ImportError:
            print("üì¶ ÂÆâË£ÖPillow...")
            try:
                subprocess.run([sys.executable, "-m", "pip", "install", "Pillow"], check=True)
                print("‚úÖ Pillow ÂÆâË£ÖÂÆåÊàê")
            except subprocess.CalledProcessError:
                print("‚ùå Pillow ÂÆâË£ÖÂ§±Ë¥•")
                return False

        # Ê£ÄÊü•ÂÖ∂‰ªñÂøÖË¶Å‰æùËµñ
        required_packages = ["requests", "playwright"]
        for package in required_packages:
            try:
                __import__(package)
                print(f"‚úÖ {package}")
            except ImportError:
                print(f"‚ö†Ô∏è Áº∫Â∞ë‰æùËµñ: {package}")
                print(f"   ËØ∑ËøêË°å: pip install {package}")

        return True
    
    def ensure_icons(self):
        """Á°Æ‰øùÂõæÊ†áÊñá‰ª∂Â≠òÂú®"""
        print("üé® Ê£ÄÊü•ÂõæÊ†áÊñá‰ª∂...")
        
        icon_file = self.icon_files.get(self.system, "app_icon.png")
        
        if not os.path.exists(icon_file):
            print(f"‚ö†Ô∏è ÂõæÊ†áÊñá‰ª∂‰∏çÂ≠òÂú®: {icon_file}")
            print("üé® ÂàõÂª∫ÈªòËÆ§ÂõæÊ†á...")
            
            # ËøêË°åÂõæÊ†áÂàõÂª∫ËÑöÊú¨
            if os.path.exists("simple_icon_creator.py"):
                subprocess.run([sys.executable, "simple_icon_creator.py"], check=True)
                print("‚úÖ ÂõæÊ†áÂàõÂª∫ÂÆåÊàê")
            else:
                print("‚ùå ÂõæÊ†áÂàõÂª∫ËÑöÊú¨‰∏çÂ≠òÂú®")
                return False
        
        # ÁâπÊÆäÂ§ÑÁêÜmacOSÁöÑICNSÊñá‰ª∂
        if self.system == "Darwin" and icon_file.endswith('.icns'):
            if not os.path.exists(icon_file):
                self.create_icns_from_png()

        if os.path.exists(icon_file):
            print(f"‚úÖ ÂõæÊ†áÊñá‰ª∂Â∞±Áª™: {icon_file}")
            return True
        else:
            print(f"‚ùå ÂõæÊ†áÊñá‰ª∂‰ªçÁÑ∂‰∏çÂ≠òÂú®: {icon_file}")
            return False

    def create_icns_from_png(self):
        """‰ªéPNGÂàõÂª∫macOS ICNSÂõæÊ†á"""
        png_path = "app_icon.png"
        icns_path = "app_icon.icns"

        if not os.path.exists(png_path):
            print(f"‚ùå Ê∫êPNGÊñá‰ª∂‰∏çÂ≠òÂú®: {png_path}")
            return False

        try:
            # ÊñπÊ≥ï1: ‰ΩøÁî®macOSÁöÑsipsÂëΩ‰ª§
            if self.system == "Darwin":
                subprocess.run([
                    "sips", "-s", "format", "icns",
                    png_path, "--out", icns_path
                ], check=True, capture_output=True)
                print(f"‚úÖ ‰ΩøÁî®sipsÂàõÂª∫ICNS: {icns_path}")
                return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            pass

        try:
            # ÊñπÊ≥ï2: ‰ΩøÁî®PILÂàõÂª∫Â§öÂ∞∫ÂØ∏ÂõæÊ†á
            from PIL import Image
            import struct

            # ÂàõÂª∫Â§ö‰∏™Â∞∫ÂØ∏ÁöÑÂõæÊ†á
            sizes = [16, 32, 64, 128, 256, 512, 1024]
            images = []

            with Image.open(png_path) as img:
                for size in sizes:
                    resized = img.resize((size, size), Image.Resampling.LANCZOS)
                    images.append(resized)

            # ‰øùÂ≠ò‰∏∫ICNS (ÁÆÄÂåñÁâàÊú¨)
            # Ê≥®ÊÑèÔºöËøôÊòØ‰∏Ä‰∏™ÁÆÄÂåñÁöÑÂÆûÁé∞ÔºåÁúüÊ≠£ÁöÑICNSÊ†ºÂºèÊõ¥Â§çÊùÇ
            images[0].save(icns_path, format='ICNS', append_images=images[1:])
            print(f"‚úÖ ‰ΩøÁî®PILÂàõÂª∫ICNS: {icns_path}")
            return True

        except Exception as e:
            print(f"‚ö†Ô∏è Êó†Ê≥ïÂàõÂª∫ICNSÊñá‰ª∂: {e}")
            # ÂõûÈÄÄÂà∞‰ΩøÁî®PNG
            if os.path.exists(png_path):
                shutil.copy2(png_path, icns_path)
                print(f"‚úÖ Â§çÂà∂PNG‰Ωú‰∏∫ICNS: {icns_path}")
                return True

        return False

    def get_data_files(self):
        """Ëé∑ÂèñÊâÄÊúâÈúÄË¶ÅÊâìÂåÖÁöÑÊï∞ÊçÆÊñá‰ª∂"""
        data_files = []

        # Ê∑ªÂä†ÂøÖÈúÄÁöÑÊï∞ÊçÆÊñá‰ª∂
        for file_path in self.data_files:
            if os.path.exists(file_path):
                abs_path = os.path.abspath(file_path)
                if self.system == "Windows":
                    data_files.append(f"{abs_path};.")
                else:
                    data_files.append(f"{abs_path}:.")
                print(f"‚úÖ Ê∑ªÂä†Êï∞ÊçÆÊñá‰ª∂: {file_path}")
            else:
                print(f"‚ö†Ô∏è Êï∞ÊçÆÊñá‰ª∂‰∏çÂ≠òÂú®: {file_path}")

        # Ê∑ªÂä†ÂèØÈÄâÈÖçÁΩÆÊñá‰ª∂
        for file_path in self.optional_files:
            if os.path.exists(file_path):
                abs_path = os.path.abspath(file_path)
                if self.system == "Windows":
                    data_files.append(f"{abs_path};.")
                else:
                    data_files.append(f"{abs_path}:.")
                print(f"‚úÖ Ê∑ªÂä†ÈÖçÁΩÆÊñá‰ª∂: {file_path}")

        return data_files

    def get_hidden_imports(self):
        """Ëé∑ÂèñÈöêËóèÂØºÂÖ•ÂàóË°®"""
        imports = []
        for module in self.hidden_imports:
            imports.extend(["--hidden-import", module])
        return imports

    def build_windows(self):
        """ÊûÑÂª∫WindowsÂèØÊâßË°åÊñá‰ª∂"""
        print("ü™ü ÊûÑÂª∫WindowsÂèØÊâßË°åÊñá‰ª∂...")

        icon_path = self.icon_files["Windows"]

        # Á°Æ‰øùÂõæÊ†áÊñá‰ª∂Â≠òÂú®‰∫éÂΩìÂâçÁõÆÂΩï
        if not os.path.exists(icon_path):
            print(f"‚ùå ÂõæÊ†áÊñá‰ª∂‰∏çÂ≠òÂú®: {icon_path}")
            return False

        # Ëé∑ÂèñÁªùÂØπË∑ØÂæÑ
        icon_abs_path = os.path.abspath(icon_path)
        script_abs_path = os.path.abspath(self.script_name)

        # ÊûÑÂª∫Âü∫Á°ÄÂëΩ‰ª§
        cmd = [
            sys.executable, "-m", "PyInstaller",
            "--onefile",
            "--windowed",
            "--name", self.app_name,
            "--distpath", self.build_dir,
            "--workpath", self.work_dir,
            "--specpath", self.spec_dir,
            "--clean",
            "--icon", icon_abs_path
        ]

        # Ê∑ªÂä†Êï∞ÊçÆÊñá‰ª∂
        for data_file in self.get_data_files():
            cmd.extend(["--add-data", data_file])

        # Ê∑ªÂä†ÈöêËóèÂØºÂÖ•
        cmd.extend(self.get_hidden_imports())

        # Ê∑ªÂä†‰∏ªËÑöÊú¨
        cmd.append(script_abs_path)
        
        try:
            subprocess.run(cmd, check=True)
            
            # Â§çÂà∂ÂõæÊ†áÂà∞ËæìÂá∫ÁõÆÂΩï
            if os.path.exists(icon_path):
                shutil.copy2(icon_path, os.path.join(self.build_dir, icon_path))
            
            exe_path = os.path.join(self.build_dir, f"{self.app_name}.exe")
            if os.path.exists(exe_path):
                size = os.path.getsize(exe_path) / (1024 * 1024)
                print(f"‚úÖ WindowsÊûÑÂª∫ÂÆåÊàê: {exe_path} ({size:.1f} MB)")
                return True
            else:
                print("‚ùå WindowsÊûÑÂª∫Â§±Ë¥•: ÂèØÊâßË°åÊñá‰ª∂Êú™ÁîüÊàê")
                return False
                
        except subprocess.CalledProcessError as e:
            print(f"‚ùå WindowsÊûÑÂª∫Â§±Ë¥•: {e}")
            return False
    
    def build_macos(self):
        """ÊûÑÂª∫macOSÂ∫îÁî®Á®ãÂ∫èÂåÖ"""
        print("üçé ÊûÑÂª∫macOSÂ∫îÁî®Á®ãÂ∫èÂåÖ...")

        # Ê£ÄÊü•ÊòØÂê¶Âú®macOS‰∏äËøêË°å
        is_native_macos = platform.system() == "Darwin"

        if is_native_macos:
            print("‚úÖ Âú®ÂéüÁîümacOSÁ≥ªÁªü‰∏äÊûÑÂª∫")
        else:
            print("‚ö†Ô∏è Âú®ÈùûmacOSÁ≥ªÁªü‰∏äÊûÑÂª∫ÔºåÂèØËÉΩÈúÄË¶ÅÂú®macOS‰∏äÊµãËØï")

        icon_path = self.icon_files["Darwin"]

        # Á°Æ‰øùICNSÂõæÊ†áÂ≠òÂú®ÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú®ÂàôÂ∞ùËØïÂàõÂª∫
        if not os.path.exists(icon_path):
            print(f"‚ö†Ô∏è macOSÂõæÊ†áÊñá‰ª∂‰∏çÂ≠òÂú®: {icon_path}")
            if os.path.exists("app_icon.png"):
                print("üîÑ Â∞ùËØï‰ªéPNGÂàõÂª∫ICNSÂõæÊ†á...")
                if self.create_icns_from_png():
                    print("‚úÖ ICNSÂõæÊ†áÂàõÂª∫ÊàêÂäü")
                else:
                    print("‚ùå ICNSÂõæÊ†áÂàõÂª∫Â§±Ë¥•Ôºå‰ΩøÁî®PNGÂõæÊ†á")
                    icon_path = "app_icon.png"
            else:
                print("‚ùå Ê≤°ÊúâÊâæÂà∞‰ªª‰ΩïÂõæÊ†áÊñá‰ª∂")
                return False

        # Ëé∑ÂèñÁªùÂØπË∑ØÂæÑ
        icon_abs_path = os.path.abspath(icon_path)
        script_abs_path = os.path.abspath(self.script_name)

        # ÊûÑÂª∫Âü∫Á°ÄÂëΩ‰ª§
        cmd = [
            sys.executable, "-m", "PyInstaller",
            "--onefile",
            "--windowed",
            "--name", self.app_name,
            "--distpath", self.build_dir,
            "--workpath", self.work_dir,
            "--specpath", self.spec_dir,
            "--clean"
        ]

        # Âè™Âú®ÊúâÊúâÊïàÂõæÊ†áÊó∂Ê∑ªÂä†ÂõæÊ†áÂèÇÊï∞
        if os.path.exists(icon_abs_path):
            cmd.extend(["--icon", icon_abs_path])

        # macOSÁâπÂÆö‰ºòÂåñ
        if is_native_macos:
            # Ê∑ªÂä†macOSÁâπÂÆöÁöÑ‰ºòÂåñÈÄâÈ°π
            cmd.extend([
                "--osx-bundle-identifier", f"com.linkensphere.{self.app_name.lower()}",
                "--target-arch", "universal2"  # ÊîØÊåÅIntelÂíåApple Silicon
            ])

        # Ê∑ªÂä†Êï∞ÊçÆÊñá‰ª∂
        for data_file in self.get_data_files():
            cmd.extend(["--add-data", data_file])

        # Ê∑ªÂä†ÈöêËóèÂØºÂÖ•
        cmd.extend(self.get_hidden_imports())

        # Ê∑ªÂä†‰∏ªËÑöÊú¨
        cmd.append(script_abs_path)

        try:
            print("üî® ÂºÄÂßãPyInstallerÊûÑÂª∫...")
            subprocess.run(cmd, check=True)

            # Â§çÂà∂ÂõæÊ†áÂà∞ËæìÂá∫ÁõÆÂΩï
            if os.path.exists(icon_path):
                dest_icon = os.path.join(self.build_dir, os.path.basename(icon_path))
                shutil.copy2(icon_path, dest_icon)
                print(f"üìã ÂõæÊ†áÂ∑≤Â§çÂà∂: {dest_icon}")

            if is_native_macos:
                # Âú®ÂéüÁîümacOS‰∏äÊûÑÂª∫
                app_path = os.path.join(self.build_dir, f"{self.app_name}")
                app_bundle_path = os.path.join(self.build_dir, f"{self.app_name}.app")

                if os.path.exists(app_bundle_path):
                    # PyInstallerÂàõÂª∫‰∫Ü.appÂåÖ
                    size = self.get_directory_size(app_bundle_path) / (1024 * 1024)
                    print(f"‚úÖ macOSÂ∫îÁî®ÂåÖÊûÑÂª∫ÂÆåÊàê: {app_bundle_path} ({size:.1f} MB)")

                    # ËÆæÁΩÆÂèØÊâßË°åÊùÉÈôê
                    executable_path = os.path.join(app_bundle_path, "Contents", "MacOS", self.app_name)
                    if os.path.exists(executable_path):
                        os.chmod(executable_path, 0o755)
                        print("‚úÖ ÂèØÊâßË°åÊùÉÈôêÂ∑≤ËÆæÁΩÆ")

                    # ÂàõÂª∫DMGÊñá‰ª∂
                    if self.create_dmg():
                        print("‚úÖ DMGÂÆâË£ÖÂåÖÂàõÂª∫ÊàêÂäü")

                    return True

                elif os.path.exists(app_path):
                    # PyInstallerÂàõÂª∫‰∫ÜÂçï‰∏™ÂèØÊâßË°åÊñá‰ª∂
                    size = os.path.getsize(app_path) / (1024 * 1024)
                    print(f"‚úÖ macOSÂèØÊâßË°åÊñá‰ª∂ÊûÑÂª∫ÂÆåÊàê: {app_path} ({size:.1f} MB)")

                    # ËÆæÁΩÆÂèØÊâßË°åÊùÉÈôê
                    os.chmod(app_path, 0o755)
                    print("‚úÖ ÂèØÊâßË°åÊùÉÈôêÂ∑≤ËÆæÁΩÆ")

                    # ÂàõÂª∫ÂêØÂä®ËÑöÊú¨
                    self.create_macos_launcher()

                    return True
                else:
                    print("‚ùå macOSÊûÑÂª∫Â§±Ë¥•: Â∫îÁî®Á®ãÂ∫èÊú™ÁîüÊàê")
                    return False
            else:
                # Âú®ÈùûmacOSÁ≥ªÁªü‰∏äÊûÑÂª∫
                exe_path = os.path.join(self.build_dir, f"{self.app_name}.exe")
                app_path = os.path.join(self.build_dir, f"{self.app_name}")

                if os.path.exists(exe_path):
                    # ÈáçÂëΩÂêç‰∏∫macOSÂèØÊâßË°åÊñá‰ª∂ÔºàÊó†Êâ©Â±ïÂêçÔºâ
                    if os.path.exists(app_path):
                        os.remove(app_path)
                    shutil.move(exe_path, app_path)

                    size = os.path.getsize(app_path) / (1024 * 1024)
                    print(f"‚úÖ macOSÊûÑÂª∫ÂÆåÊàê: {app_path} ({size:.1f} MB)")
                    print("‚ö†Ô∏è Ê≥®ÊÑè: Ê≠§Êñá‰ª∂Âú®ÈùûmacOSÁ≥ªÁªü‰∏äÊûÑÂª∫ÔºåÈúÄË¶ÅÂú®macOS‰∏äÊµãËØï")

                    # ÂàõÂª∫macOS‰∏ìÁî®ÁöÑÂêØÂä®ËÑöÊú¨
                    self.create_macos_launcher()
                    return True
                elif os.path.exists(app_path):
                    size = os.path.getsize(app_path) / (1024 * 1024)
                    print(f"‚úÖ macOSÊûÑÂª∫ÂÆåÊàê: {app_path} ({size:.1f} MB)")
                    print("‚ö†Ô∏è Ê≥®ÊÑè: Ê≠§Êñá‰ª∂Âú®ÈùûmacOSÁ≥ªÁªü‰∏äÊûÑÂª∫ÔºåÈúÄË¶ÅÂú®macOS‰∏äÊµãËØï")

                    # ÂàõÂª∫macOS‰∏ìÁî®ÁöÑÂêØÂä®ËÑöÊú¨
                    self.create_macos_launcher()
                    return True
                else:
                    print("‚ùå macOSÊûÑÂª∫Â§±Ë¥•: ÂèØÊâßË°åÊñá‰ª∂Êú™ÁîüÊàê")
                    return False

        except subprocess.CalledProcessError as e:
            print(f"‚ùå macOSÊûÑÂª∫Â§±Ë¥•: {e}")
            return False
    
    def build_linux(self):
        """ÊûÑÂª∫LinuxÂèØÊâßË°åÊñá‰ª∂"""
        print("üêß ÊûÑÂª∫LinuxÂèØÊâßË°åÊñá‰ª∂...")

        icon_path = self.icon_files["Linux"]

        # Á°Æ‰øùÂõæÊ†áÊñá‰ª∂Â≠òÂú®
        if not os.path.exists(icon_path):
            print(f"‚ùå LinuxÂõæÊ†áÊñá‰ª∂‰∏çÂ≠òÂú®: {icon_path}")
            return False

        # Ëé∑ÂèñÁªùÂØπË∑ØÂæÑ
        script_abs_path = os.path.abspath(self.script_name)

        # ÊûÑÂª∫Âü∫Á°ÄÂëΩ‰ª§
        cmd = [
            sys.executable, "-m", "PyInstaller",
            "--onefile",
            "--name", self.app_name,
            "--distpath", self.build_dir,
            "--workpath", self.work_dir,
            "--specpath", self.spec_dir,
            "--clean"
        ]

        # Ê∑ªÂä†Êï∞ÊçÆÊñá‰ª∂
        for data_file in self.get_data_files():
            cmd.extend(["--add-data", data_file])

        # Ê∑ªÂä†ÈöêËóèÂØºÂÖ•
        cmd.extend(self.get_hidden_imports())

        # Ê∑ªÂä†‰∏ªËÑöÊú¨
        cmd.append(script_abs_path)
        
        try:
            subprocess.run(cmd, check=True)
            
            # Â§çÂà∂ÂõæÊ†áÂà∞ËæìÂá∫ÁõÆÂΩï
            if os.path.exists(icon_path):
                shutil.copy2(icon_path, os.path.join(self.build_dir, icon_path))
            
            app_path = os.path.join(self.build_dir, self.app_name)
            if os.path.exists(app_path):
                # ËÆæÁΩÆÊâßË°åÊùÉÈôê
                os.chmod(app_path, 0o755)
                size = os.path.getsize(app_path) / (1024 * 1024)
                print(f"‚úÖ LinuxÊûÑÂª∫ÂÆåÊàê: {app_path} ({size:.1f} MB)")
                return True
            else:
                print("‚ùå LinuxÊûÑÂª∫Â§±Ë¥•: ÂèØÊâßË°åÊñá‰ª∂Êú™ÁîüÊàê")
                return False
                
        except subprocess.CalledProcessError as e:
            print(f"‚ùå LinuxÊûÑÂª∫Â§±Ë¥•: {e}")
            return False

    def verify_cross_platform_compatibility(self):
        """È™åËØÅË∑®Âπ≥Âè∞ÂÖºÂÆπÊÄß"""
        print("üîç È™åËØÅË∑®Âπ≥Âè∞ÂÖºÂÆπÊÄß...")

        issues = []

        # Ê£ÄÊü•‰∏ªË¶ÅÊ∫êÊñá‰ª∂
        required_files = [
            "simple_linken_gui.py",
            "linken_sphere_playwright_browser.py",
            "linken_sphere_api.py"
        ]

        for file_path in required_files:
            if not os.path.exists(file_path):
                issues.append(f"Áº∫Â∞ëÂøÖÈúÄÊñá‰ª∂: {file_path}")

        # Ê£ÄÊü•GUIÂÖºÂÆπÊÄß
        try:
            import tkinter as tk
            print("‚úÖ Tkinter GUIÊîØÊåÅ")
        except ImportError:
            issues.append("Tkinter GUI‰∏çÂèØÁî®")

        # Ê£ÄÊü•ÂºÇÊ≠•ÊîØÊåÅ
        try:
            import asyncio
            print("‚úÖ AsyncioÂºÇÊ≠•ÊîØÊåÅ")
        except ImportError:
            issues.append("AsyncioÂºÇÊ≠•‰∏çÂèØÁî®")

        # Ê£ÄÊü•ÊµèËßàÂô®Ëá™Âä®Âåñ
        try:
            import playwright
            print("‚úÖ PlaywrightÊµèËßàÂô®Ëá™Âä®Âåñ")
        except ImportError:
            issues.append("PlaywrightÊµèËßàÂô®Ëá™Âä®Âåñ‰∏çÂèØÁî®")

        # Ê£ÄÊü•HTTPËØ∑Ê±Ç
        try:
            import requests
            print("‚úÖ Requests HTTPÂ∫ì")
        except ImportError:
            issues.append("Requests HTTPÂ∫ì‰∏çÂèØÁî®")

        # Ê£ÄÊü•ÂõæÂÉèÂ§ÑÁêÜ
        try:
            from PIL import Image, ImageTk
            print("‚úÖ PILÂõæÂÉèÂ§ÑÁêÜ")
        except ImportError:
            issues.append("PILÂõæÂÉèÂ§ÑÁêÜ‰∏çÂèØÁî®")

        # Ê£ÄÊü•Âπ≥Âè∞ÁâπÂÆöÂäüËÉΩ
        if self.system == "Darwin":
            # macOSÁâπÂÆöÊ£ÄÊü•
            try:
                subprocess.run(["sips", "--version"], capture_output=True, check=True)
                print("‚úÖ macOS sipsÂ∑•ÂÖ∑ÂèØÁî®")
            except (subprocess.CalledProcessError, FileNotFoundError):
                print("‚ö†Ô∏è macOS sipsÂ∑•ÂÖ∑‰∏çÂèØÁî®ÔºåÂ∞Ü‰ΩøÁî®Â§áÁî®ÊñπÊ≥ï")

        # Ê£ÄÊü•Linken Sphere APIÁ´ØÂè£
        try:
            import socket
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex(('127.0.0.1', 36555))
            sock.close()
            if result == 0:
                print("‚úÖ Linken Sphere APIÁ´ØÂè£(36555)ÂèØËÆøÈóÆ")
            else:
                print("‚ö†Ô∏è Linken Sphere APIÁ´ØÂè£(36555)‰∏çÂèØËÆøÈóÆ")
        except Exception:
            print("‚ö†Ô∏è Êó†Ê≥ïÊ£ÄÊü•Linken Sphere APIÁ´ØÂè£")

        if issues:
            print("\n‚ùå ÂèëÁé∞ÂÖºÂÆπÊÄßÈóÆÈ¢ò:")
            for issue in issues:
                print(f"   - {issue}")
            return False
        else:
            print("\n‚úÖ Ë∑®Âπ≥Âè∞ÂÖºÂÆπÊÄßÈ™åËØÅÈÄöËøá")
            return True

    def create_icns_from_png(self):
        """‰ªéPNGÂàõÂª∫ICNSÂõæÊ†áÊñá‰ª∂"""
        try:
            if platform.system() == "Darwin":
                # Âú®macOS‰∏ä‰ΩøÁî®sipsÂëΩ‰ª§
                cmd = [
                    "sips", "-s", "format", "icns",
                    "app_icon.png", "--out", "app_icon.icns"
                ]
                subprocess.run(cmd, check=True, capture_output=True)
                return True
            else:
                # Âú®ÂÖ∂‰ªñÁ≥ªÁªü‰∏äÂ∞ùËØï‰ΩøÁî®PIL
                try:
                    from PIL import Image
                    img = Image.open("app_icon.png")
                    # ÂàõÂª∫Â§ö‰∏™Â∞∫ÂØ∏ÁöÑÂõæÊ†á
                    sizes = [16, 32, 64, 128, 256, 512, 1024]
                    icons = []
                    for size in sizes:
                        resized = img.resize((size, size), Image.Resampling.LANCZOS)
                        icons.append(resized)

                    # ‰øùÂ≠ò‰∏∫ICNSÔºàÈúÄË¶Åpillow-heifÊîØÊåÅÔºâ
                    icons[0].save("app_icon.icns", format="ICNS",
                                append_images=icons[1:], save_all=True)
                    return True
                except ImportError:
                    print("‚ö†Ô∏è PIL‰∏çÂèØÁî®ÔºåÊó†Ê≥ïÂàõÂª∫ICNSÂõæÊ†á")
                    return False
        except Exception as e:
            print(f"‚ö†Ô∏è ÂàõÂª∫ICNSÂõæÊ†áÂ§±Ë¥•: {e}")
            return False

    def get_directory_size(self, path):
        """Ëé∑ÂèñÁõÆÂΩïÂ§ßÂ∞è"""
        total_size = 0
        for dirpath, _, filenames in os.walk(path):
            for filename in filenames:
                filepath = os.path.join(dirpath, filename)
                if os.path.exists(filepath):
                    total_size += os.path.getsize(filepath)
        return total_size

    def create_dmg(self):
        """ÂàõÂª∫macOS DMGÂÆâË£ÖÂåÖ"""
        if platform.system() != "Darwin":
            print("‚ö†Ô∏è DMGÂàõÂª∫ÈúÄË¶ÅÂú®macOS‰∏äËøêË°å")
            return False

        try:
            dmg_name = f"{self.app_name}.dmg"
            dmg_path = os.path.join(self.build_dir, dmg_name)

            # Âà†Èô§Â∑≤Â≠òÂú®ÁöÑDMG
            if os.path.exists(dmg_path):
                os.remove(dmg_path)

            # Êü•ÊâæÂ∫îÁî®ÂåÖÊàñÂèØÊâßË°åÊñá‰ª∂
            app_bundle = os.path.join(self.build_dir, f"{self.app_name}.app")
            app_executable = os.path.join(self.build_dir, self.app_name)

            source_path = app_bundle if os.path.exists(app_bundle) else app_executable

            if not os.path.exists(source_path):
                print("‚ùå Êâæ‰∏çÂà∞Ë¶ÅÊâìÂåÖÁöÑÂ∫îÁî®Á®ãÂ∫è")
                return False

            # ÂàõÂª∫DMG
            cmd = [
                "hdiutil", "create", "-volname", self.app_name,
                "-srcfolder", source_path,
                "-ov", "-format", "UDZO", dmg_path
            ]

            subprocess.run(cmd, check=True, capture_output=True)

            if os.path.exists(dmg_path):
                size = os.path.getsize(dmg_path) / (1024 * 1024)
                print(f"‚úÖ DMGÂàõÂª∫ÊàêÂäü: {dmg_path} ({size:.1f} MB)")
                return True
            else:
                print("‚ùå DMGÂàõÂª∫Â§±Ë¥•")
                return False

        except subprocess.CalledProcessError as e:
            print(f"‚ùå DMGÂàõÂª∫Â§±Ë¥•: {e}")
            return False
        except Exception as e:
            print(f"‚ùå DMGÂàõÂª∫Âá∫Èîô: {e}")
            return False

    def create_macos_launcher(self):
        """ÂàõÂª∫macOSÂêØÂä®ËÑöÊú¨"""
        launcher_content = f'''#!/bin/bash
# macOSÂêØÂä®ËÑöÊú¨ for {self.app_name}

# Ëé∑ÂèñËÑöÊú¨ÊâÄÂú®ÁõÆÂΩï
DIR="$( cd "$( dirname "${{BASH_SOURCE[0]}}" )" &> /dev/null && pwd )"

# ËÆæÁΩÆÂèØÊâßË°åÊùÉÈôê
chmod +x "$DIR/{self.app_name}"

# ÂêØÂä®Â∫îÁî®Á®ãÂ∫è
"$DIR/{self.app_name}" "$@"
'''

        launcher_path = os.path.join(self.build_dir, f"start_{self.app_name}.sh")
        with open(launcher_path, 'w', encoding='utf-8') as f:
            f.write(launcher_content)

        print(f"‚úÖ ÂàõÂª∫macOSÂêØÂä®ËÑöÊú¨: start_{self.app_name}.sh")

        # ÂàõÂª∫macOSÂÆâË£ÖËØ¥Êòé
        install_guide = f'''# macOS ÂÆâË£ÖËØ¥Êòé

## ÂÆâË£ÖÊ≠•È™§

1. Â∞Ü‰ª•‰∏ãÊñá‰ª∂Â§çÂà∂Âà∞ Applications Êñá‰ª∂Â§πÊàñ‰ªªÊÑè‰ΩçÁΩÆÔºö
   - {self.app_name} (‰∏ªÁ®ãÂ∫è)
   - start_{self.app_name}.sh (ÂêØÂä®ËÑöÊú¨)
   - app_icon.icns (ÂõæÊ†áÊñá‰ª∂)
   - ÂÖ∂‰ªñÁõ∏ÂÖ≥Êñá‰ª∂

2. ÊâìÂºÄÁªàÁ´ØÔºåÂØºËà™Âà∞Êñá‰ª∂ÊâÄÂú®ÁõÆÂΩï

3. ËÆæÁΩÆÂèØÊâßË°åÊùÉÈôêÔºö
   ```bash
   chmod +x {self.app_name}
   chmod +x start_{self.app_name}.sh
   ```

4. ËøêË°åÁ®ãÂ∫èÔºö
   ```bash
   ./start_{self.app_name}.sh
   ```
   ÊàñËÄÖÁõ¥Êé•ËøêË°åÔºö
   ```bash
   ./{self.app_name}
   ```

## ÊïÖÈöúÊéíÈô§

Â¶ÇÊûúÈÅáÂà∞"Êó†Ê≥ïÊâìÂºÄÔºåÂõ†‰∏∫ÂÆÉÊù•Ëá™Ë∫´‰ªΩ‰∏çÊòéÁöÑÂºÄÂèëËÄÖ"ÈîôËØØÔºö

1. Âè≥ÈîÆÁÇπÂáªÂ∫îÁî®Á®ãÂ∫è
2. ÈÄâÊã©"ÊâìÂºÄ"
3. Âú®ÂºπÂá∫ÁöÑÂØπËØùÊ°Ü‰∏≠ÁÇπÂáª"ÊâìÂºÄ"

ÊàñËÄÖÂú®ÁªàÁ´Ø‰∏≠ËøêË°åÔºö
```bash
xattr -d com.apple.quarantine {self.app_name}
```

## Á≥ªÁªüË¶ÅÊ±Ç

- macOS 10.15 ÊàñÊõ¥È´òÁâàÊú¨
- Linken Sphere ÊµèËßàÂô®
'''

        guide_path = os.path.join(self.build_dir, "macOS_ÂÆâË£ÖËØ¥Êòé.txt")
        with open(guide_path, 'w', encoding='utf-8') as f:
            f.write(install_guide)

        print(f"‚úÖ ÂàõÂª∫macOSÂÆâË£ÖËØ¥Êòé: macOS_ÂÆâË£ÖËØ¥Êòé.txt")

    def create_dmg(self):
        """ÂàõÂª∫macOS DMGÂÆâË£ÖÂåÖ"""
        try:
            dmg_name = f"{self.app_name}.dmg"
            app_path = os.path.join(self.build_dir, self.app_name)

            if os.path.exists(app_path):
                # ‰ΩøÁî®hdiutilÂàõÂª∫DMG
                subprocess.run([
                    "hdiutil", "create", "-volname", self.app_name,
                    "-srcfolder", app_path, "-ov", "-format", "UDZO",
                    os.path.join(self.build_dir, dmg_name)
                ], check=True, capture_output=True)

                print(f"‚úÖ ÂàõÂª∫DMGÂÆâË£ÖÂåÖ: {dmg_name}")

        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ö†Ô∏è Êó†Ê≥ïÂàõÂª∫DMGÂÆâË£ÖÂåÖ")
    
    def create_usage_guide(self):
        """ÂàõÂª∫‰ΩøÁî®ËØ¥Êòé"""
        guide_content = f"""# {self.app_name} ‰ΩøÁî®ËØ¥Êòé

## Á≥ªÁªüË¶ÅÊ±Ç
- Linken Sphere ÊµèËßàÂô® (ÂøÖÈ°ªÂÆâË£Ö)
- Á®≥ÂÆöÁöÑÁΩëÁªúËøûÊé•
- Êìç‰ΩúÁ≥ªÁªü: Windows 10+, macOS 10.15+, ÊàñÁé∞‰ª£LinuxÂèëË°åÁâà

## ‰ΩøÁî®ÊñπÊ≥ï
1. Á°Æ‰øùLinken SphereÂ∑≤ÂÆâË£ÖÂπ∂ËøêË°å
2. ÂèåÂáªËøêË°å {self.app_name}
3. Âú®GUI‰∏≠ÈÖçÁΩÆÂèÇÊï∞
4. ÁÇπÂáª"ÂºÄÂßã"ÊåâÈíÆÂêØÂä®Ëá™Âä®Âåñ

## ÂäüËÉΩÁâπÁÇπ
‚úÖ Linken Sphere ÊåáÁ∫π‰øùÊä§
‚úÖ Â§öÁ∫øÁ®ãÂπ∂ÂèëÊîØÊåÅ
‚úÖ ÂÆûÊó∂Êó•ÂøóÁõëÊéß
‚úÖ ÈÖçÁΩÆ‰øùÂ≠ò/ÂØºÂÖ•/ÂØºÂá∫
‚úÖ ÂçïÁã¨Á∫øÁ®ãÊéßÂà∂

## ÊïÖÈöúÊéíÈô§
- Á°Æ‰øùLinken SphereÊ≠£Âú®ËøêË°å
- Ê£ÄÊü•ÁΩëÁªúËøûÊé•
- Êü•ÁúãÊó•ÂøóËæìÂá∫Ëé∑ÂèñËØ¶ÁªÜ‰ø°ÊÅØ

## ÊäÄÊúØÊîØÊåÅ
Â¶ÇÊúâÈóÆÈ¢òÔºåËØ∑Êü•ÁúãÊó•ÂøóÊñá‰ª∂ÊàñËÅîÁ≥ªÊäÄÊúØÊîØÊåÅ„ÄÇ
"""
        
        guide_path = os.path.join(self.build_dir, "‰ΩøÁî®ËØ¥Êòé.txt")
        with open(guide_path, 'w', encoding='utf-8') as f:
            f.write(guide_content)
        
        print(f"‚úÖ ÂàõÂª∫‰ΩøÁî®ËØ¥Êòé: {guide_path}")
    
    def build(self):
        """ÊâßË°åÊûÑÂª∫"""
        print(f"üöÄ ÂºÄÂßãÊûÑÂª∫ {self.app_name} for {self.system}")
        print("=" * 60)

        # È™åËØÅË∑®Âπ≥Âè∞ÂÖºÂÆπÊÄß
        if not self.verify_cross_platform_compatibility():
            print("‚ùå Ë∑®Âπ≥Âè∞ÂÖºÂÆπÊÄßÈ™åËØÅÂ§±Ë¥•")
            return False

        # Ê£ÄÊü•‰æùËµñ
        if not self.check_dependencies():
            print("‚ùå ‰æùËµñÊ£ÄÊü•Â§±Ë¥•")
            return False

        # Á°Æ‰øùÂõæÊ†áÂ≠òÂú®
        if not self.ensure_icons():
            print("‚ö†Ô∏è ÂõæÊ†áÂáÜÂ§áÂ§±Ë¥•ÔºåÁªßÁª≠ÊûÑÂª∫...")

        # Ê∏ÖÁêÜÊóßÁöÑÊûÑÂª∫Êñá‰ª∂
        if os.path.exists(self.build_dir):
            shutil.rmtree(self.build_dir)
        if os.path.exists("build"):
            shutil.rmtree("build")

        os.makedirs(self.build_dir, exist_ok=True)
        
        # Ê†πÊçÆÂπ≥Âè∞ÊûÑÂª∫
        success = False
        if self.system == "Windows":
            success = self.build_windows()
        elif self.system == "Darwin":
            success = self.build_macos()
        elif self.system == "Linux":
            success = self.build_linux()
        else:
            print(f"‚ùå ‰∏çÊîØÊåÅÁöÑÂπ≥Âè∞: {self.system}")
            return False
        
        if success:
            # ÂàõÂª∫‰ΩøÁî®ËØ¥Êòé
            self.create_usage_guide()
            
            print("\nüéâ ÊûÑÂª∫ÂÆåÊàê!")
            print(f"üìÅ ËæìÂá∫ÁõÆÂΩï: {self.build_dir}")
            
            # ÂàóÂá∫ÁîüÊàêÁöÑÊñá‰ª∂
            if os.path.exists(self.build_dir):
                print("üìã ÁîüÊàêÁöÑÊñá‰ª∂:")
                for item in os.listdir(self.build_dir):
                    item_path = os.path.join(self.build_dir, item)
                    if os.path.isfile(item_path):
                        size = os.path.getsize(item_path) / (1024 * 1024)
                        print(f"  - {item} ({size:.1f} MB)")
                    else:
                        print(f"  - {item}/ (ÁõÆÂΩï)")
            
            return True
        else:
            print("‚ùå ÊûÑÂª∫Â§±Ë¥•")
            return False

def main():
    """‰∏ªÂáΩÊï∞"""
    builder = CrossPlatformBuilder()
    
    if len(sys.argv) > 1:
        target_platform = sys.argv[1].lower()
        if target_platform in ["windows", "macos", "linux"]:
            # Âº∫Âà∂ÊåáÂÆöÂπ≥Âè∞
            platform_map = {
                "windows": "Windows",
                "macos": "Darwin", 
                "linux": "Linux"
            }
            builder.system = platform_map[target_platform]
            print(f"üéØ Âº∫Âà∂ÊûÑÂª∫ÁõÆÊ†á: {builder.system}")
    
    return builder.build()

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
